
type Query {
  application: Application!
  themeSettings: Theme!
  notifications: [Notification]
  getPoll(pollId: String!): Poll
  allPolls: [Poll]
  fetchPolls(filter: PollsFilter): [Poll]
}
type Mutation {
  setThemeName(themeName: String!): Theme!
  setThemeMode(themeMode: String!): Theme!
  toggleThemeMode: Theme!
  checkNotifications(notificationIds: [String!]!): CheckNotificationsPayload
  createPoll(input: CreatePollInput): CreatePollPayload
}

type Subscription {
  newNotification: Notification
}



type Application {
  name: String!
}

scalar Upload

type Theme {
  name: String
  mode: String
}

type User {
  id: String!
  firstname: String!
  lastname: String!
  profilePicture: String!
  email: String!
  activated: Boolean!
  preferedLanguage: String
}

type Notification {
  id: String
  publisher: String
  message: String
  checked: Boolean
}
type CheckNotificationsPayload {
  checked: [Notification]
}

type Poll {
  id: String!
  language: String!
  userId: String
  approved: Boolean!
  subject: String!
  options: [PollOption]
  votersCount: Int!
  myVote: PollOption
}

type PollOption {
  id: String!
  text: String!
  voters: [String!]
  votersCount: Int!
}

input PollsFilter {
  queryText: String,
  show: String
}

input CreatePollInput {
  subject: String!
  options: [String!]!
}

type CreatePollPayload {
  created: Boolean
  poll: Poll
  error: String
}
